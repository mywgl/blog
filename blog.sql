/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.7.30 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `blog`;

/*Table structure for table `t_blog` */

DROP TABLE IF EXISTS `t_blog`;

CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '博客id',
  `title` varchar(100) DEFAULT NULL COMMENT '博客标题',
  `content` longtext COMMENT '博客内容',
  `first_picture` varchar(255) DEFAULT NULL COMMENT '博客的首图',
  `flag` varchar(100) DEFAULT NULL COMMENT '博客的标记 分别是 原创、转载、翻译',
  `views` int(11) DEFAULT NULL COMMENT '浏览数',
  `appreciation` bit(1) NOT NULL COMMENT '是否赞赏',
  `shar_statement` bit(1) NOT NULL COMMENT '是否分享',
  `comment_enabled` bit(1) NOT NULL COMMENT '是否开启评论',
  `published` bit(1) NOT NULL COMMENT '是否发布 不发布就是保存草稿状态',
  `recommended` bit(1) NOT NULL COMMENT '是否推荐',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更改时间',
  `type_id` bigint(20) DEFAULT NULL COMMENT 'typeId',
  `user_id` bigint(20) DEFAULT NULL COMMENT 'userId',
  `description` varchar(255) DEFAULT NULL COMMENT '博客摘要',
  PRIMARY KEY (`id`),
  KEY `type_id_ref_t_type_id_fk` (`type_id`),
  KEY `user_id_ref_t_user_fk` (`user_id`),
  CONSTRAINT `type_id_ref_t_type_id_fk` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `user_id_ref_t_user_fk` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4;

/*Data for the table `t_blog` */

insert  into `t_blog`(`id`,`title`,`content`,`first_picture`,`flag`,`views`,`appreciation`,`shar_statement`,`comment_enabled`,`published`,`recommended`,`create_time`,`update_time`,`type_id`,`user_id`,`description`) values (1,'文件上传','#### 使用ajax+servlet实现文件下载\r\n**前端代码**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Title</title>\r\n        <script type=\"text/javascript\" src=\"js/jquery-1.8.3.min.js\"></script>\r\n    </head>\r\n    <body>\r\n            <button  id=\"download\" style=\"margin: 20px\">下载图片</button>\r\n\r\n        <script>\r\n\r\n            $(\'#download\').click(function () {\r\n                $.ajax({\r\n                    type:\"get\",\r\n                    url:\"download.do\",\r\n                    success:function (data){\r\n                        window.location.href=this.url;\r\n                    }\r\n                })\r\n            })\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n**后端代码**\r\n\r\n```java\r\n@WebServlet(\"/download.do\")\r\npublic class DownloadFileServlet extends HttpServlet {\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        String realPath = req.getServletContext().getRealPath(\"\\\\WEB-INF\\\\classes\\\\xiaomai.png\");\r\n        String fileName = realPath.substring(realPath.lastIndexOf(\"\\\\\") + 1);\r\n        System.out.println(fileName);\r\n        //设置下载文件的响应头\r\n        // 为了防止文件名是中文响应回去时乱码使用URLEncoder.encode(fileName,\"UTF-8\")进行编码\r\n        resp.setHeader(\"Content-disposition\",\"attachment;filename=\"+ URLEncoder.encode(fileName,\"UTF-8\"));\r\n        FileInputStream input = new FileInputStream(realPath);\r\n        byte[] buff = new byte[1024];\r\n        int len =0;\r\n        ServletOutputStream out = resp.getOutputStream();\r\n        while ((len = input.read(buff))>0){\r\n            out.write(buff,0,len);\r\n        }\r\n        req.setAttribute(\"msg\",\"hello\");\r\n        input.close();\r\n        out.close();\r\n        \r\n    }\r\n    \r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        doGet(req, resp);\r\n    }\r\n}\r\n\r\n```\r\n','https://picsum.photos/id/110/900/500','原创',6,'\0','\0','\0','\0','','2019-03-31 10:52:45','2021-04-03 04:20:19',5,1,'使用ajax+servlet实现文件下载'),(2,'java实现邮件发送','#### 要想使用java发送邮件需要获取邮箱授权码\r\n**1.打开QQ邮箱进入设置**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021011811591062.png)\r\n2. 选选中账户选项![在这里插入图片描述](https://img-blog.csdnimg.cn/20210118120021662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n3.下划找到以下选项\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210118120133321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n4.开启pop3/smtp服务并点击生成授权码\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210118120226932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n**以上就是生成授权码和开启邮件pop3/smt服务的过程**\r\n**以及需要的依赖**\r\n\r\n```xml\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>javax.mail</groupId>\r\n            <artifactId>mail</artifactId>\r\n            <version>1.4.7</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.activation</groupId>\r\n            <artifactId>activation</artifactId>\r\n            <version>1.1.1</version>\r\n        </dependency>\r\n    </dependencies>\r\n```\r\n\r\n```java\r\npublic class MailDemo2 {\r\n    // 用户邮箱 填写自已的邮箱\r\n    private final static String EMAIL_ADDRESS=\"\";\r\n    // 邮箱授权码 从上面的步骤中获取的授权码填入\r\n    private final static String EMAIL_PASSWORD=\"\";\r\n    public static void main(String[] args) {\r\n        Properties prop = new Properties();\r\n        // 设置QQ邮箱服务器\r\n        prop.put(\"mail.host\", \"smtp.qq.com\");\r\n        // 邮箱发送协议\r\n        prop.put(\"mail.transport.protocol\", \"smtp\");\r\n        // 开启验证用户名和密码\r\n        prop.put(\"mail.smtp.auth\", \"true\");\r\n    \r\n        try {\r\n            // 使用QQ邮箱发送邮箱需要开启ssl加密，其他类型的邮箱不用\r\n            MailSSLSocketFactory sf = new MailSSLSocketFactory();\r\n            prop.put(\"mail.smtp.ssl.enable\", \"true\");\r\n            prop.put(\"mail.smtp.socketFactory\", sf);\r\n            sf.setTrustAllHosts(true);\r\n            // 发送邮件五个步骤\r\n        \r\n            // 1.设置邮箱所需的Session对象\r\n            Session session = Session.getDefaultInstance(prop, new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(EMAIL_ADDRESS, EMAIL_PASSWORD);\r\n                }\r\n            });\r\n            // 开启debug模式 可以查看程序发送Email的运行状态\r\n            session.setDebug(true);\r\n        \r\n            // 2.通过Session获取transport对象\r\n            Transport ts = session.getTransport();\r\n        \r\n            // 3.使用邮箱用户名和授权码 连接服务器\r\n            ts.connect((String) prop.get(\"mail.host\"), EMAIL_ADDRESS, EMAIL_PASSWORD);\r\n            // 4.创建邮件\r\n            MimeMessage message = new MimeMessage(session);\r\n            // 设置发件人\r\n            message.setFrom(new InternetAddress(EMAIL_ADDRESS));\r\n            // 设置收件人\r\n            message.setRecipient(Message.RecipientType.TO,new InternetAddress(EMAIL_ADDRESS));\r\n            // 设置邮件主题\r\n            message.setSubject(\"一封带有图片的邮件\");\r\n            // 图片对象\r\n            MimeBodyPart image = new MimeBodyPart();\r\n            URL resource = MailDemo2.class.getClassLoader().getResource(\"xiaomai.png\");\r\n            // 使用图片需要经过数据处理\r\n            DataHandler handler = new DataHandler(resource);\r\n            image.setDataHandler(handler);\r\n            // 设置图片id\r\n            image.setContentID(\"xiaomai.png\");\r\n\r\n            // 设置正文内容\r\n            MimeBodyPart text = new MimeBodyPart();\r\n            // 这里的cid是image.setContentID(\"xiaomai.png\");  ContentID的简写\r\n            text.setContent(\"hello world<img src=\'cid:xiaomai.png\'>\",\"text/html;charset=utf-8\");\r\n            \r\n            // 设置对象关系\r\n            MimeMultipart multipart = new MimeMultipart();\r\n            multipart.addBodyPart(text);\r\n            multipart.addBodyPart(image);\r\n            multipart.setSubType(\"related\");\r\n            \r\n            // 设置消息到上下文中，以及保存提交\r\n            message.setContent(multipart);\r\n            message.saveChanges();\r\n            \r\n            // 5.发送邮件\r\n            ts.sendMessage(message,message.getAllRecipients());\r\n            // 关闭连接\r\n            ts.close();\r\n        } catch (MessagingException | GeneralSecurityException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n','https://picsum.photos/id/110/900/500','原创',1,'','','','\0','','2017-03-31 11:20:24','2021-04-03 04:20:19',5,1,'邮件发送'),(3,'八大排序之归并排序','```java\r\n// TODO 归并排序\r\npublic class MergeSort {\r\n    public static void main(String[] args) {\r\n//        int[] arr = {8, 4, 5, 7, 1, 3, 6, 2};\r\n        // 测试时间复杂度 O(n log n)\r\n        int [] arr = new int[80000];\r\n        int[] temp = new int[arr.length];\r\n        for (int i = 0; i < arr.length; i++) {\r\n            // 生成 [0,8000000)的随机数\r\n            arr[i] = (int) (Math.random()*8000000);\r\n        }\r\n        long start_Time = System.currentTimeMillis();\r\n        mergeSort(arr,temp,0,arr.length-1);\r\n        long stop_Time = System.currentTimeMillis();\r\n        System.out.printf(\"耗费 %d ms\",stop_Time - start_Time);\r\n//        System.out.println(Arrays.toString(arr));\r\n\r\n    }\r\n\r\n    // 分 + 合 方法\r\n    public static void mergeSort(int[]arr ,int[] temp,int left,int right){\r\n        if(left<right){\r\n            int center = (left + right) /2; // 中间索引\r\n            // 向左递归 进行分解\r\n            mergeSort(arr,temp,left,center);\r\n\r\n            // 向右递归进行分解\r\n            mergeSort(arr,temp,center +1,right);\r\n            // 合并\r\n            merge(arr,temp,left,center,right);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 合并方法\r\n     *\r\n     * @param arr    排序的原始数组\r\n     * @param temp   合并存储中间结果的数组\r\n     * @param left   最左边的索引\r\n     * @param center 中间的索引\r\n     * @param right  最右边的索引\r\n     */\r\n    private static void merge(int[] arr, int[] temp, int left, int center, int right) {\r\n        int leftIndex = left; //  初始化 l ,左边的有序序列初始索引\r\n        int c = center + 1; // 初始化 c，右边开始的索引\r\n        int index = 0;  // temp 数组的初始索引\r\n\r\n        /*\r\n          第一步 先把 左右两步（有序）的数据按照规则填充到temp数组\r\n          直到左右两边的有序序列，有一边处理完毕为止\r\n         */\r\n        while (leftIndex <= center && c <= right) {\r\n            if (arr[leftIndex] <= arr[c]) {\r\n                temp[index] = arr[leftIndex];\r\n                leftIndex++;\r\n            } else {\r\n                temp[index] = arr[c];\r\n                c++;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        //(2) 把有剩余的一边数据依次全部填充到temp\r\n        while (leftIndex <= center){\r\n            temp[index] = arr[leftIndex];\r\n            leftIndex ++;\r\n            index ++;\r\n        }\r\n        while (c <= right){\r\n            temp[index] = arr[c] ;\r\n            index ++;\r\n            c ++;\r\n        }\r\n\r\n        //(3) 把临时数组的拷贝到arr中\r\n        // 注意 ，并不是 每次都拷贝所有\r\n        index = 0;\r\n        int tempLeft = left;\r\n        while(tempLeft <= right){\r\n            arr[tempLeft] = temp[index];\r\n            index ++;\r\n            tempLeft ++;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\n','https://picsum.photos/id/110/900/500','原创',1,'','','','\0','','2018-03-31 11:32:46','2021-04-03 14:04:47',5,1,'归并排序使用java实现'),(4,'jsp引入jstl失败问题处理方式','##### 要使用EL表达式的c标签需要导入jstl的依赖以及引入头文件`<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>`\r\n在maven中导入依赖\r\n\r\n    <dependency>\r\n        <groupId>javax.servlet</groupId>\r\n        <artifactId>jstl</artifactId>\r\n        <version>1.2</version>\r\n    </dependency>\r\n这里==只需要==导入这个依赖就够了，网上需要导入的两个依赖==jstl.jar、standard.jar==在这个依赖中都包含进来了所以不需要导入重复的jar包了\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111093810222.png)\r\n**这里的javax和org就是指jstl和standard的这两个的jar了**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111093927233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n然后需要在web的WEB-INF的lib中导入这个依赖\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111094444517.png)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111094545535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n2是指相应的项目的war包\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111100826128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n\r\n在相应的模块中右键单击就会出现箭头所指向的视图出现==点击put into /WEB-INF/lib==就能把依赖添加war包的中lib目录下了\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111095208593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n**网上大部分教程也是说到这里或者在tomcat的lib目录中也添加这个jar再重启项目就能解决jstl引入依赖问题，然而错误并没有得到实际解决**\r\n==下面才是关键的==\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111101010399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n**把图中的的后缀为tld的文件提出来放到一个文件夹中**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111101526548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n==这里注意是在WEB-INF开始点击第一步==\r\n按照顺序依次点击在点击第三步之后选择自已刚才提取出来的所有tld文件的==文件夹==\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111101925905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n这是添加之后的效果图\r\n==之后重启项目jstl引入才不会出错==\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210111102604155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjA1Mjgy,size_16,color_FFFFFF,t_70)\r\n\r\n这是编译后的项目war文件夹在web-inf文件下添加tld文件的结果图\r\n==这些tld文件亲测放在web-inf的lib里面是没用的必须放在外面也就是web-inf目录下==','https://picsum.photos/id/1025/900/500','原创',7,'','','','','','2017-03-31 20:42:16','2021-04-03 04:20:19',1,1,'要使用EL表达式的c标签需要导入jstl的依赖以及引入头文件`<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>'),(5,'Linx常用命令','```bash\r\n//查看缓存\r\n[root@master ~]# hash \r\n\r\n//清除缓存\r\n[root@master ~]# hash -r\r\n\r\n//挂载磁盘 一般是在/dev/cdrom下先创建好挂载文件夹\r\n[root@master ~]# mount /dev/cdrom  /要挂载的文件夹名\r\n\r\n//查看挂载点\r\n[root@master ~]#dh -h\r\n\r\n//卸载挂载点\r\n[root@master ~]# mount  /挂载的文件夹\r\n\r\n//rpm安装包命令\r\n[root@master ~]# rpm -ivh rpm包名\r\n\r\n//rpm 卸载 \r\n[root@master ~]# rpm -e --nodeps  rpm软件包名 \r\n\r\n//查找软件\r\n[root@master ~]# rpm -qa| grep 包名 \r\n\r\n//查看bash的使用文档\r\n[root@master ~]#men bash\r\n\r\n//设置bash文档为中文显示\r\n[root@master ~]#LANG=zh_CN.UTF-8\r\n\r\n//查看进程树  如果显示找不到命令 安装psmisc\r\n[root@master ~]#pstree  mysql  //查看mysql的进程 ，输入要查找的名称\r\n\r\n\r\n//显示当前进程号\r\n[root@master ~]#echo $$\r\n\r\n// 增加文件的执行权限\r\n[root@master ~]#chomd +x  文件名\r\n\r\n//返回上一次工作目录\r\n[root@master ~]#cd -\r\n\r\n//查找软件并直接卸载\r\n[root@master ~]# rpm -qa |grep java(文件名) | xargs rpm -e --nodeps\r\n// 查看启动的端口\r\n[root@master ~]#netstat -nltp\r\n\r\n//查看当前系统的负载均衡情况 还有一个是 uptime\r\n[root@master ~]# w\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200618201146614.png)\r\n\r\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第1行从左至右显示的信息依次为：时间、系统运行时间、登录用户数、平均负载。从第2行开始的所有行则是告诉我们：\r\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前登录的用户名及其登录地址等。其实在这些信息中，最应该关注第1行中的load average：后面的3个数值。\r\n> \r\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第1个数值表示1分钟内系统的平均负载值，第2个数值表示5分钟内系统的平均负载值，第3个数值表示15分钟内系统的平均负载值。我们着重看第1个值，它表示单位时间段内使用CPU的活动进程数（在这里其实就是1分钟内），值越大就说明服务器压力越大。一般情况下，这个值只要不超过服务器的CPU数量就没有关系。如果服务器的CPU数量为8，那么值小于8就说明当前服务器没有压力；否则就要关注一下了。查看服务器有几个CPU的方法如下所示：\r\n\r\n```bash\r\n//查看cup数量\r\n[root@master ~]#cat /proc/cpuinfo\r\n//查看内存使用情况 -m 以兆换算来显示 -g 以G换算来显示\r\n[root@master ~]#free\r\n```\r\n\r\n\r\n\r\n','https://picsum.photos/id/1025/900/500','原创',2,'','','','','','2020-03-31 20:44:35','2021-04-03 04:20:19',9,1,'常用的Linux服务器命令'),(6,'八大排序之快速排序','```java\r\n// 快速排序\r\npublic class QuickSort {\r\n    public static void main(String[] args) {\r\n        int[] arr = {-9,78,0,23,-567,-70};\r\n//        int[] arr = {1,4,3,2};\r\n        //       测试时间复杂度 O(n^2)\r\n/*\r\n        int [] arr = new int[80000];\r\n        for (int i = 0; i < arr.length; i++) {\r\n            // 生成 [0,8000000)的随机数\r\n            arr[i] = (int) (Math.random()*8000000);\r\n        }\r\n*/\r\n        long start_Time = System.currentTimeMillis();\r\n        quickSort(arr,0,arr.length-1);\r\n        long stop_Time = System.currentTimeMillis();\r\n        // 毫秒之间\r\n        System.out.printf(\"耗费 %d ms\",stop_Time - start_Time);\r\n        System.out.println(Arrays.toString(arr));\r\n    }\r\n    public static void quickSort(int[] arr, int left, int right) {\r\n        int leftIndex = left;\r\n        int rightIndex = right;\r\n        int temp =0;\r\n        // 中心点\r\n        int pivot = arr[(left + right) / 2];\r\n        /**\r\n         *  while 循环的目的是比pivot 值小的放到左边\r\n         *  比pivot 值大的 放到右边\r\n         */\r\n        while (leftIndex < rightIndex){\r\n            // 在 pivot 的左边一直找 ，找到大于等于pivot 值，才退出\r\n            while (arr[leftIndex] < pivot){\r\n                 leftIndex +=1;\r\n            }\r\n\r\n            // 在 pivot 的右边一直找 ，找到小于等于pivot 值，才退出\r\n            while (arr[rightIndex] > pivot){\r\n                rightIndex -=1;\r\n            }\r\n\r\n            /**\r\n             * 如果 leftIndex >= rightIndex  说明 pivot 的左右的值 ，已经按照左边的全部\r\n             * 是小于pivot 值，右边全部是大于等于pivot的值 退出循环\r\n              */\r\n            if(leftIndex == rightIndex){\r\n                break;\r\n            }\r\n            // 如果不等于退出条件就是找到了相应的值 进行交换\r\n            temp = arr[leftIndex];\r\n            arr [leftIndex] = arr[rightIndex];\r\n            arr [rightIndex] = temp;\r\n\r\n            /**\r\n             * 交换完成后 有三种情况\r\n             * 1、左边的leftIndex 已经移动到中间点 但是 右边的rightIndex还没有移动到中间点 所以右边的需要后退一步 继续判断循环\r\n             * 2、右边的rightIndex 已经移动到中间点 但是 左边的leftIndex还没有移动到中间点，需要前移 继续循环\r\n             * 3、就是两边都没有移动到中间点 继续循环判断\r\n             *  这里的判断可以不写 这里判断的目的是减少循环的次数\r\n             */\r\n            if(arr[leftIndex] == pivot){\r\n                rightIndex -=1;\r\n            }\r\n\r\n            if(arr[rightIndex] == pivot){\r\n                leftIndex +=1;\r\n\r\n            }\r\n\r\n        }\r\n        // 这里既是防止死循环（栈溢出）的同时也是划分左递归 和 右递归 开始和结束的区域\r\n        if(leftIndex == rightIndex){\r\n            leftIndex +=1;\r\n            rightIndex -=1;\r\n        }\r\n        // 左递归 对左边的区域进行排序\r\n        if(left < rightIndex){\r\n            quickSort(arr,left, rightIndex);\r\n        }\r\n        //右递归 对右边的区域进行排序\r\n        if (right > leftIndex){\r\n            quickSort(arr,leftIndex ,right);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\n','https://picsum.photos/id/110/900/500','原创',0,'','','','','','2018-03-31 20:54:11','2021-04-03 04:20:19',5,1,'java实现桶排序'),(7,'博客项目','# myblog-mybaits\r\n\r\n个人博客系统（SpringBoot+Mybatis）\r\n\r\n博客地址：https://onestar.newstar.net.cn/\r\n\r\n**使用该源码希望能够注明原博客以及源码出处，并禁止商用，谢谢！**\r\n\r\n\r\n> 本文将从技术栈、功能需求、数据库设计来讲述，前端页面展示可以看我上一篇文章[：【SpringBoot搭建个人博客】- 前端页面展示（一）](https://onestar.newstar.net.cn/blog/37)\r\n\r\n### 一、技术栈\r\n\r\n#### 1.前端\r\n\r\n- JS框架：JQuery\r\n- CSS框架：[Semantic UI官网](https://semantic-ui.com/)\r\n- Markdown编辑器：[编辑器 Markdown](https://pandao.github.io/editor.md/)\r\n- 代码高亮：[代码高亮 prism](https://github.com/PrismJS/prism)\r\n- 动画效果：[动画 animate.css](https://daneden.github.io/animate.css/)\r\n- 文章目录：[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)\r\n- 音乐盒[：zplayer](https://gitee.com/supperzh/zplayer)\r\n- 照片墙[：lightbox插件](https://github.com/JavaScript-Kit/jkresponsivegallery)\r\n\r\n#### 2.后端\r\n\r\n- 核心框架：SpringBoot 2.2.5\r\n- 项目构建：jdk1.8、Maven 3\r\n- 持久层框架：Mybatis\r\n- 模板框架：Thymeleaf\r\n- 分页插件：PageHelper\r\n- 加密：MD5加密\r\n- 运行环境：腾讯云Centos7\r\n\r\n#### 3.数据库\r\n\r\n- MySQL 5.7\r\n\r\n### 二、功能需求\r\n\r\n因为是个人博客，所以没有做用户权限管理，只是简单的区分了一下普通用户和管理员用户，这里就根据普通用户和管理员用户来讲述功能需求，其实从上一篇博文的前端页面就能大致的看出需求了\r\n\r\n#### 1.普通用户\r\n\r\n- 查看文章信息：文章列表、推荐文章、文章标题、文章内容、发布时间、访问量以及评论等信息\r\n- 查看分类文章：分类列表、分类文章信息\r\n- 查看时间轴：按照文章时间发布顺序查看文章\r\n- 搜索文章：导航栏右边搜索框根据关键字搜索\r\n- 听音乐：上一曲、下一曲、音量控制、播放顺序控制、查看歌词等\r\n- 留言：留言并回复\r\n- 查看友链：查看并访问博主在友链页面添加的友链连接\r\n- 查看相册信息：相册列表、照片名称、照片拍摄地点、时间、照片描述\r\n\r\n#### 2.管理员用户（栈主）\r\n\r\n- 拥有普通用户所有功能权限\r\n- 登录：在主页路径下加“/admin”，可进入登录页面，根据数据库的用户名和密码进行登录\r\n- 文章管理：查询文章列表、新增文章、编辑文章、删除文章、搜索文章\r\n- 分类管理：查询分类列表、新增分类、编辑分类、删除分类\r\n- 友链管理：查询友链列表、新增友链、编辑友链、删除友链\r\n- 相册管理：查询相册列表、新增照片、编辑照片、删除照片\r\n- 消息管理：登录后恢复评论留言会显示栈主的头像信息，并能显示删除消息按键，可以对消息进行删除\r\n\r\n### 三、数据库设计\r\n\r\n> 由于博主最开始是使用jpa作为持久层开发此博客的，数据表是由jpa框架自动生成的，在使用mybatis为持久层的时候就沿用了jpa生成的数据库，但是对评论表和留言表进行了改动，如果同样是先用jpa，再用mybatis开发的伙伴这里要注意一下，如果直接使用mybatis开发的则可以忽略\r\n\r\n#### 1.数据表\r\n\r\n- 博客数据表：t_blog\r\n- 分类数据表：t_type\r\n- 用户数据表：t_user\r\n- 评论数据表：t_comment\r\n- 留言数据表：t_message\r\n- 友链数据表：t_friend\r\n- 相册数据表：t_picture\r\n\r\n#### 2.实体关系\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/CACBEF653E6745BF834B892952BFA816?method=download&shareKey=946ce6c8c2a0c84b107053cc254088f2)\r\n\r\n- 博客和分类是多对一的关系：一个博客对应一个分类，一个分类可以对应多个博客\r\n- 博客和用户是多对一的关系：一个博客对应一个用户，一个用户可以对应多个博客\r\n- 博客和评论是一对多的关系：一个博客可以对应多个评论，一个评论对应一个博客\r\n- 评论和回复是一对多的关系：一个评论可以对应多个回复，一个回复对应一个评论\r\n\r\n> 留言和评论是一样的，还有友链和相册数据表和其他表没有关联\r\n\r\n#### 3.实体属性\r\n\r\n博客属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/CF5106DE22344BB481B3412A5BFAAAB9?method=download&shareKey=ae43526cd18465a53011fccbbe6e25c8)\r\n\r\n分类属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/6C78F81369EB477B98D540266E5F4F58?method=download&shareKey=a820cfe6f3d6ebd860f0dff1b3bf8ba8)\r\n\r\n用户属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/74338146706B4DB18C392C58C6287257?method=download&shareKey=2ad9cd5685461de2d57b983e85d97612)\r\n\r\n评论属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/012FA484A82F47F5834BDB3FF7F1F668?method=download&shareKey=e971a831c76926da204a87ec5ac41a48)\r\n\r\n留言属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/DC140E28066C4A54BAF8CDD351B4E479?method=download&shareKey=a39cdf3a8661671ac1a5de0b27a3e855)\r\n\r\n友链属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/D4A2CC8BA02C4CFAA1279A8C5BF95B83?method=download&shareKey=fc02df1a79a3d6086be94758c5370918)\r\n\r\n相册属性：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/0648E5B2CA874903919E01F8854A36E4?method=download&shareKey=ef3e79e99d83615b6020eb8e9356c8c2)\r\n\r\n\r\n- 博客属性：标题、内容、首图、标记、浏览次数、赞赏开启、版权开启、评论开启、是否发布、创建时间、更新时间、描述\r\n- 分类属性：分类名称\r\n- 用户属性：昵称、用户名、密码、邮箱、类型、头像、创建时间、更新时间\r\n- 评论属性：昵称、邮箱、头像、评论内容、创建时间、博客id、父评论id、管理员id\r\n- 留言属性：昵称、邮箱、头像、留言内容、创建时间、父留言id、管理员id\r\n- 友链属性：网址、名称、创建时间、图片地址\r\n- 相册属性：图片地址、图片描述、图片名称、拍摄时间地点\r\n\r\n#### 4.表结构\r\n\r\n博客表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/6559F08528F24F7195279C5FEDF52644?method=download&shareKey=3aa33f0533b03214f163cd601fae0c9c)\r\n\r\n分类表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/D06135B93E2048B6924BD236BC255BDA?method=download&shareKey=f5f91a8cc8735f708cef2b1cae775231)\r\n\r\n用户表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/290F867E30DB4660B43DCF3DA29ED32F?method=download&shareKey=d180fe4a8e610b72bc250292a85ab1f9)\r\n\r\n评论表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/1B76BB89DD3545108A0116E9ABAFF35C?method=download&shareKey=44605f12ba7c296616de066f9d18edfc)\r\n\r\n\r\n留言表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/D29424D70CD44AD787B5B2BA74D0AEE2?method=download&shareKey=2070c81708cc3588f4de7fc303369df2)\r\n\r\n\r\n友链表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/0575501118154154BE53910A0D3F843B?method=download&shareKey=acf785dae919b80c235ddca9d6a1df38)\r\n\r\n\r\n相册表：\r\n\r\n![image](https://note.youdao.com/yws/api/personal/file/DE3BFFBA1DB5415F8C1B70E30B676BF0?method=download&shareKey=526904984ef591f552a72c6cb48e9404)\r\n\r\n\r\n\r\n\r\n#### 4.建表语句\r\n\r\n```sql\r\n/*\r\n Navicat MySQL Data Transfer\r\n\r\n Source Server         : myblog-localhost\r\n Source Server Type    : MySQL\r\n Source Server Version : 50717\r\n Source Host           : localhost:3306\r\n Source Schema         : myblog\r\n\r\n Target Server Type    : MySQL\r\n Target Server Version : 50717\r\n File Encoding         : 65001\r\n\r\n Date: 30/04/2020 17:02:10\r\n*/\r\n\r\nSET NAMES utf8mb4;\r\nSET FOREIGN_KEY_CHECKS = 0;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_blog\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_blog`;\r\nCREATE TABLE `t_blog`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `appreciation` bit(1) NOT NULL,\r\n  `commentabled` bit(1) NOT NULL,\r\n  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,\r\n  `create_time` datetime(0) NULL DEFAULT NULL,\r\n  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `first_picture` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `flag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `published` bit(1) NOT NULL,\r\n  `recommend` bit(1) NOT NULL,\r\n  `share_statement` bit(1) NOT NULL,\r\n  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `update_time` datetime(0) NULL DEFAULT NULL,\r\n  `views` int(11) NULL DEFAULT NULL,\r\n  `type_id` bigint(20) NULL DEFAULT NULL,\r\n  `user_id` bigint(20) NULL DEFAULT NULL,\r\n  `comment_count` int(255) NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE,\r\n  INDEX `FK292449gwg5yf7ocdlmswv9w4j`(`type_id`) USING BTREE,\r\n  INDEX `FK8ky5rrsxh01nkhctmo7d48p82`(`user_id`) USING BTREE,\r\n  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\r\n  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT\r\n) ENGINE = InnoDB AUTO_INCREMENT = 62 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_comment\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_comment`;\r\nCREATE TABLE `t_comment`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `create_time` datetime(0) NULL DEFAULT NULL,\r\n  `blog_id` bigint(20) NULL DEFAULT NULL,\r\n  `parent_comment_id` bigint(20) NULL DEFAULT NULL,\r\n  `admin_comment` bit(1) NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_friend\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_friend`;\r\nCREATE TABLE `t_friend`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `blogaddress` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\r\n  `blogname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\r\n  `create_time` datetime(0) NULL DEFAULT NULL,\r\n  `pictureaddress` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 58 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_message\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_message`;\r\nCREATE TABLE `t_message`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `create_time` datetime(0) NULL DEFAULT NULL,\r\n  `parent_message_id` bigint(20) NULL DEFAULT NULL,\r\n  `admin_message` bit(1) NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 100 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_picture\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_picture`;\r\nCREATE TABLE `t_picture`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `pictureaddress` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `picturedescription` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `picturename` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `picturetime` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_type\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_type`;\r\nCREATE TABLE `t_type`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 58 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Table structure for t_user\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `t_user`;\r\nCREATE TABLE `t_user`  (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `create_time` datetime(0) NULL DEFAULT NULL,\r\n  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  `type` int(11) NULL DEFAULT NULL,\r\n  `update_time` datetime(0) NULL DEFAULT NULL,\r\n  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\r\n\r\nSET FOREIGN_KEY_CHECKS = 1;\r\n\r\n```\r\n\r\n下一篇将讲述后端框架的搭建\r\n\r\n【点关注，不迷路，欢迎关注本站】\r\n\r\n地址：https://onestar.newstar.net.cn/','https://picsum.photos/id/1005/900/500','原创',124,'','','','','','2018-04-01 01:46:50','2021-04-03 22:06:12',9,1,'个人博客系统（SpringBoot+Mybatis）'),(8,'青春正能量励志文章','记不清楚是什么时候读过《伏尔加河上的纤夫》了，也记不清楚它的具体内容了。但是最近总是有一幅这样的图画萦绕在我脑海：一群依衫褴褛、身体孱弱的纤夫拉着粗大的纤绳，躬着背、弯着腰，艰难且坚强地前进。\r\n\r\n　　这是一幅挂在市人才市场正面影壁上的一幅画，名字就叫伏尔加河上的纤夫。\r\n\r\n　　起初，它并没有引起我的注意，只不过是一幅画罢了。由于工作的关系，经常去人才市场办事，随着出入人才市场次数的增多、阅历的增长和工作压力的加大，这幅画越加清晰地浮现在我的脑海中，我似乎明白了这幅挂在这里的画的含义，它应该不是随意之作，而是有意为之。它似乎在昭示着我们的职场状态，一种背负各种压力，负重前进的状态!\r\n\r\n　　仔细品位，我越加发现它是那么的亲切，那么的切合我们的现状，我们的职场状态与伏尔加河上的纤夫何其的相似，只不过是形式不同，程度差异而已。纤夫们肩上背的是有形的绳索，拉的是沙俄贵族的奢侈享乐，挣的是活命钱;而我们职场中人肩上背负的是无数根无形的绳索，拉的是极端现实的生活和无限增长的需求和欲望带给我们的巨大的压力，为的是使自己的职场之路走的更好，拥有更高的职位，更大程度地释放自己的潜能，获得更多的认可和自我实现。\r\n\r\n　　为了在经济迅速增长、科技日新月异、网络技术迅猛发展的今天谋得一个生存和发展的职场空间，我们不得不每天从睡眼惺忪中强制自己准时醒来，匆匆进食，匆匆赶车，匆匆进入工作状态。快速的经济增长和巨大的竞争压力容不得我们有半点迟疑，不进则退的感觉越来越真实，匀速前进可能都已经跟不上时代的脚步，我们必须以加速度前进了!\r\n\r\n　　为了使自己不要落后于时代，不要被竞争所击倒，不要明天醒来没了工作，我们忙完了工作，忙生活，忙完了生活，忙学习，忙充电。这样快节奏、高速度的工作状态使我们有点迷失自己，有点不知所措，神经紧绷，随时都会崩溃的感觉。\r\n\r\n　　我们好像整天生活在云雾里，越来越看不懂自己，我们几乎是被推着望前走，几乎没有什么时间是属于自己的，除了睡觉的时间没有被剥夺。我们就像是被上紧了发条的时钟，永不停息地摆动，摆动，摆累了，就倒下来，然后继续摆动。\r\n\r\n　　无奈的是我们不得不接受这样的现实，不得不积极地去适应快速变化的市场与环境。我们不敢放松自己，就怕一撒手就没了明天，因为我们实在不知道我们的明天会是什么，我们要死死的抓住今天，抓住现在。\r\n\r\n　　我们不得不亲手给自己带上一道道无形的枷锁，给自己施加压力，逼着自己负重前进。\r\n\r\n　　这是一个讲实力和能力的时代，今天的努力决定了明天的生活，今天的准备是为了明天的机会。竞争是残酷的，能力的高低决定了我们的实力，实力决定价值，价值决定未来。一纸文凭定终身的时代已经是上个世纪的事情了，文凭也像牛奶一样被贴上了保质期的标签，具有了保质期。本科生已经早就不敢坐享其成了，坐享其成的结果就是坐以待毙，越来越多的硕士生、博士生、MBA来到了我们的身边，和我们抢夺职位、抢夺薪水!\r\n\r\n　　经济水平提高了，物产丰富了，可供我们消费的产品、技术、服务多得我们都来不及搞清楚，薪水增长了，可供支配的资金却越来越少了。为了获得更好的地位、更好的生活，我们没有选择，我们必须挣扎!\r\n\r\n　　这就是我们的生存状态，纤夫般的生存状态。为了在竞争的社会获得自己的一席之地，获得更好的发现，能够不断地实现自我，我们不得不在承受巨大的工作生活压力的同时，继续承受学习的压力，继续捧起课本，走进教室，拿文凭、拿学位，拿证书，学知识，学技能，为了在竞争的夹缝中生存，我们不能不给自己套上了这些枷锁，这就是生活，知识经济时代的生活!\r\n\r\n　　总要人问人为什么活得这么累?为什么啊?我想用黄宏生的一句格言回答这个问题并结束本文：“人有两种，一种是快乐的猪，一种是痛苦的人，我愿意做痛苦的人!”\r\n\r\n　　像伏尔加河上的纤夫那样!','https://picsum.photos/id/1005/900/500','原创',1,'','','','','','2019-04-01 02:03:56','2021-04-03 14:03:28',7,1,'仔细品位，我越加发现它是那么的亲切，那么的切合我们的现状，我们的职场状态与伏尔加河上的纤夫何其的相似，只不过是形式不同，程度差异而已。纤夫们肩上背的是有形的绳索，拉的是沙俄贵族的奢侈享乐，挣的是活命钱;而我们职场中人肩上背负的是无数根无形的绳索'),(9,'生活日记','　其实自从发育以后，大概十二岁开始，爸爸就不再亲手打自己。而是授意傀儡去行刑，除了特殊的责罚，一般都是在屏风后，或者刑房里。但是依稀记得有一回，怒火万丈的爸爸还是破例，亲自教训了长大的自己……\r\n\r\n　　那年那天，齐姝琴刚好满了十五岁，但是她的生日，因为是母亲的忌日，自然没有人会提。家里人不闻不问，不代表全天下就都装聋作哑。毕竟还有学校。虽然齐姝琴瞒得很好，但她柔弱的美丽，所引来的那些坚持不懈的追求者，终于有一个具有侦探素质的，打探出她的生辰。\r\n\r\n　　其实那天，齐姝琴逃课了。前几天，连续一周的胸闷心慌，让她咬咬牙，用攒了许多年的零用钱，去了一次医院。本以为没什么大事，但是那慈祥而负责的老医生，却对着各种单子和造影蹙了眉头，一遍又一遍，让她做一些稀奇古怪的体检。\r\n\r\n　　生日当天，是最后一次报告单子出来的时候。齐姝琴逃课去医院领取，并要听一下那老医生的嘱咐。去的时候，她不会想到，那样一个结果……安静而坦然地从医院出来，她路过了学校的车站，邻班的那个男生，似是徘徊了许久，已接近绝望。此时此刻，这高大帅气的男生，见到纤细的齐姝琴，沿着自行车道，慢慢走过来的时候，两只眼睛都亮了。\r\n\r\n　　不假思索地，大胆的男孩，将蛋糕盒子递给了她，“齐姝琴……我……我喜欢你，很久了。”然后他扭脸就跑——十五岁的大男孩，遇到心爱的人，终究是在最后一刻，腼腆而怯懦了。留下的蛋糕，就让齐姝琴，手足无措起来。她总不好将别人的心意随随便便就送了人——何况都放学了，也没法再请同学们围在一起分吃。丢掉，这更不可以——齐姝琴的心底，其实是那样感激。尤其是在这个特殊的日子里。这是母亲去了后，自己得到的第一份生日礼物。\r\n\r\n　　齐姝琴将生日蛋糕，偷偷地带回家。齐家的主宅大，而长住的族人少，大多是傀儡——按照事先用咒法输入的指令行事，不会注意到齐家的大小姐，在这一天带回了什么古怪东西。齐姝琴走得很快，但她却碰到了刚满十二岁的小弟弟齐宇成，这个年龄的男孩子，正是最调皮的。\r\n\r\n　　“哦哦！大姐姐买蛋糕了！我要吃！我要吃！”齐宇成高兴地闹道，“大姐姐给我吃！”齐姝琴吓坏了，不远处，就是父亲的书房——每到这个日子，父亲总要在书房里，一个人追忆母亲许久。“嘘，别闹了。”齐姝琴赶快哄着弟弟，但是淘气而开始叛逆的男孩子，哪里肯听？只嚷着“吃蛋糕，吃蛋糕”，声音不见小，反倒大了起来。齐念佛终究是听到了声音，他打开书房的门，走了出来。\r\n\r\n　　“吵什么呢？”父亲对自己的大女儿和小儿子，威严地问。然而他的目光，很快就落到了齐姝琴放到地上的蛋糕盒子上。\r\n\r\n　　“谁的？”他淡淡地问。齐姝琴在父亲严厉的目光注视下，不敢撒谎。“是同学送的。”她小声地说，“爸爸……爸爸，我想过一次生日。”齐念佛的视线凝在大女儿的额发上，他走过去，一巴掌将齐姝琴扇翻在地。\r\n\r\n　　齐宇成吓到了，“爸爸打姐姐啦！好可怕！”齐念佛弹指唤出一个傀儡，将蛋糕盒子丢给了它，“把这个恶心的东西丢出去！齐姝琴，你这辈子都不配再过生日！”\r\n\r\n　　齐姝琴捂着火辣的脸，含泪点点头。“跟我进来。”齐念佛命令道。齐姝琴知道父亲已经生气了，她不敢有任何迟疑和违抗，扶着墙站起来，跌撞地走入书房。\r\n\r\n　　“爸爸……”齐念佛将走过来，将书房的门锁紧，他转身又给了女儿一巴掌，打得她嘴角，都冒出了一丝血迹。“爸爸……我错了。”\r\n\r\n　　齐姝琴捂着肿痛的脸，哭道，她预感到暴风雨即将来临，“爸爸，对不起，我错了。”但是两只傀儡，已经将一张厂字形的刑凳，放到了书桌旁——和直平式刑凳不同，厂字形的刑凳，受刑人趴在上面，双腿是倾斜下垂的，屁股不是朝上，而是朝外。多用于鞭责。\r\n\r\n　　齐姝琴害怕了，爸爸要鞭笞自己吗？“你这个……害人精。”齐念佛用一种厌恶的眼神，怒视着自己的亲生女儿——十二年了，那个可恨的四处胡闹的小女孩子，已经变成了亭亭玉立的大姑娘，修长而纤细的身子，吹弹可破的肌肤，还有柔软的长发，秀美的脸庞，看上去，总是那样委屈的目光……无可置疑，齐姝琴生得楚楚可怜，她的泪水和哀求，总会打动太多人的心。但唯独软化不了她自己的父亲。\r\n\r\n　　“你还有脸记得过生日？”齐念佛低声问，“你忘得倒是快啊。”“爸爸，我真的错了……”齐姝琴惊恐地盯着那张刑凳，“爸爸……求求你了，我也是妈妈和您生的啊！”\r\n\r\n　　啪！齐念佛又给了女儿一个巴掌，将齐姝琴打翻在地毯上。他目光冰冷而再无一次感情。“脱衣服，趴上去。”齐念佛冷冷地说。脱衣服的意思，就是把校装裙子和底裤都褪下去。齐姝琴通红了脸，“爸爸……”她哀求着，“爸爸，我长大了，给女儿留点面子……”\r\n\r\n　　齐念佛一把拽起细弱的女儿，厚实的手掌握着她瘦弱的胳膊，毫不留情地将女儿拖到了刑凳前。“面子？你还需要面子吗？今天是什么日子？你却欢天喜地地弄个蛋糕回来，是想如何庆祝啊？你是想在你妈妈的忌日这天，庆祝什么？！”齐念佛怒斥道。\r\n\r\n　　“爸爸，我……我从来没过过生日，我真的好想过一次，爸爸，求求您了……我过不了几个也许就会下去陪妈妈……”齐姝琴哭到泪眼婆娑。“那再好不过了。”齐念佛完全不会明白女儿这句话，到底是什么意思，他只是在怒气的作用下，阴冷地说，“我真不明白，当初，为什么生了你？”他轻轻质疑着。\r\n\r\n　　齐姝琴感到心口被车子撞了下，那些脆弱而晶亮的玻璃——叫做希望的，都碎掉了。算了。本来，带着一点点对父爱的期盼和信心，她想说，想把结果都说出来。但是父亲此刻的态度，让她彻底绝望了。爸爸或许盼着我死，爸爸或许恨不得我死掉，给妈妈偿命','https://picsum.photos/id/1005/900/500','原创',0,'','','','','','2017-04-01 02:06:17','2021-04-03 04:20:19',6,1,'其实自从发育以后，大概十二岁开始，爸爸就不再亲手打自己。而是授意傀儡去行刑，除了特殊的责罚，一般都是在屏风后，或者刑房里。但是依稀记得有一回，怒火万丈的爸爸还是破例，亲自教训了长大的自己……\r\n'),(10,'Spring面试题','史上最全Spring Boot面试题（含答案）看完就是Spring Boot专家！\r\n\r\n一.Spring Boot、Spring MVC 和 Spring 有什么区别？\r\nSpringFrame\r\n\r\nSpringFramework 最重要的特征是依赖注入。所有 SpringModules 不是依赖注入就是 IOC 控制反转。\r\n\r\n当我们恰当的使用 DI 或者是 IOC 的时候，我们可以开发松耦合应用。松耦合应用的单元测试可以很容易的进行。\r\n\r\nSpringMVC\r\n\r\nSpring MVC 提供了一种分离式的方法来开发 Web 应用。通过运用像 DispatcherServelet，MoudlAndView 和 ViewResolver 等一些简单的概念，开发 Web 应用将会变的非常简单。\r\n\r\nSpringBoot\r\n\r\nSpring 和 SpringMVC 的问题在于需要配置大量的参数。\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><bean\r\n class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n<property name=\"prefix\">\r\n <value>/WEB-INF/views/</value>\r\n </property>\r\n <property name=\"suffix\">\r\n <value>.jsp</value>\r\n </property>\r\n </bean>\r\n <mvc:resources mapping=\"/webjars/**\" location=\"/webjars/\"/></pre>\r\nSpring Boot 通过一个自动配置和启动的项来目解决这个问题。为了更快的构建产品就绪应用程序，Spring Boot 提供了一些非功能性特征。\r\n\r\n二.什么是自动配置？\r\nSpring 和 SpringMVC 的问题在于需要配置大量的参数。\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><bean\r\n class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n<property name=\"prefix\">\r\n <value>/WEB-INF/views/</value>\r\n </property>\r\n <property name=\"suffix\">\r\n <value>.jsp</value>\r\n </property>\r\n </bean>\r\n <mvc:resources mapping=\"/webjars/**\" location=\"/webjars/\"/></pre>\r\n我们能否带来更多的智能？当一个 MVC JAR 添加到应用程序中的时候，我们能否自动配置一些 beans？\r\n\r\nSpring 查看（CLASSPATH 上可用的框架）已存在的应用程序的配置。在此基础上，Spring Boot 提供了配置应用程序和框架所需要的基本配置。这就是自动配置。\r\n\r\n三.什么是 Spring Boot Stater ？\r\n启动器是一套方便的依赖没描述符，它可以放在自己的程序中。你可以一站式的获取你所需要的 Spring 和相关技术，而不需要依赖描述符的通过示例代码搜索和复制黏贴的负载。\r\n\r\n例如，如果你想使用 Sping 和 JPA 访问数据库，只需要你的项目包含 spring-boot-starter-data-jpa 依赖项，你就可以完美进行。\r\n\r\n四.你能否举一个例子来解释更多 Staters 的内容？\r\n让我们来思考一个 Stater 的例子 -Spring Boot Stater Web。\r\n\r\n如果你想开发一个 web 应用程序或者是公开 REST 服务的应用程序。Spring Boot Start Web 是首选。让我们使用 Spring Initializr 创建一个 Spring Boot Start Web 的快速项目。\r\n\r\nSpring Boot Start Web 的依赖项\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><dependency>\r\n <groupId>org.springframework.boot</groupId>\r\n <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency></pre>\r\n下面的截图是添加进我们应用程序的不同的依赖项\r\n\r\n史上最全Spring Boot面试题（含答案）看完就是Spring Boot专家！\r\n\r\n依赖项可以被分为\r\n\r\nSpring - core，beans，context，aop\r\nWeb MVC - （Spring MVC）\r\nJackson - for JSON Binding\r\nValidation - Hibernate,Validation API\r\nEnbedded Servlet Container - Tomcat\r\nLogging - logback,slf4j\r\n任何经典的 Web 应用程序都会使用所有这些依赖项。Spring Boot Starter Web 预先打包了这些依赖项。\r\n\r\n作为一个开发者，我不需要再担心这些依赖项和它们的兼容版本。\r\n\r\n五.Spring Boot 还提供了其它的哪些 Starter Project Options？\r\nSpring Boot 也提供了其它的启动器项目包括，包括用于开发特定类型应用程序的典型依赖项。\r\n\r\nspring-boot-starter-web-services - SOAP Web Services\r\n\r\nspring-boot-starter-web - Web 和 RESTful 应用程序\r\n\r\nspring-boot-starter-test - 单元测试和集成测试\r\n\r\nspring-boot-starter-jdbc - 传统的 JDBC\r\n\r\nspring-boot-starter-hateoas - 为服务添加 HATEOAS 功能\r\n\r\nspring-boot-starter-security - 使用 SpringSecurity 进行身份验证和授权\r\n\r\nspring-boot-starter-data-jpa - 带有 Hibeernate 的 Spring Data JPA\r\n\r\nspring-boot-starter-data-rest - 使用 Spring Data REST 公布简单的 REST 服务\r\n\r\n六.Spring 是如何快速创建产品就绪应用程序的？\r\nSpring Boot 致力于快速产品就绪应用程序。为此，它提供了一些譬如高速缓存，日志记录，监控和嵌入式服务器等开箱即用的非功能性特征。\r\n\r\nspring-boot-starter-actuator - 使用一些如监控和跟踪应用的高级功能\r\n\r\nspring-boot-starter-undertow, spring-boot-starter-jetty, spring-boot-starter-tomcat - 选择您的特定嵌入式 Servlet 容器\r\n\r\nspring-boot-starter-logging - 使用 logback 进行日志记录\r\n\r\nspring-boot-starter-cache - 启用 Spring Framework 的缓存支持\r\n\r\nSpring2 和 Spring5 所需要的最低 Java 版本是什么？\r\nSpring Boot 2.0 需要 Java8 或者更新的版本。Java6 和 Java7 已经不再支持。\r\n\r\n七.创建一个 Spring Boot Project 的最简单的方法是什么？\r\nSpring Initializr是启动 Spring Boot Projects 的一个很好的工具。\r\n\r\n\r\n\r\n史上最全Spring Boot面试题（含答案）看完就是Spring Boot专家！\r\n\r\n就像上图中所展示的一样，我们需要做一下几步：\r\n登录 Spring Initializr，按照以下方式进行选择：\r\n选择 com.in28minutes.springboot 为组\r\n选择 studet-services 为组件\r\n选择下面的依赖项\r\nWeb\r\nActuator\r\nDevTools\r\n点击生 GenerateProject\r\n将项目导入 Eclipse。文件 - 导入 - 现有的 Maven 项目\r\n八.Spring Initializr 是创建 Spring Boot Projects 的唯一方法吗？\r\n不是的。\r\n\r\nSpring Initiatlizr 让创建 Spring Boot 项目变的很容易，但是，你也可以通过设置一个 maven 项目并添加正确的依赖项来开始一个项目。\r\n\r\n在我们的 Spring 课程中，我们使用两种方法来创建项目。\r\n\r\n第一种方法是 start.spring.io 。\r\n\r\n另外一种方法是在项目的标题为“Basic Web Application”处进行手动设置。\r\n\r\n手动设置一个 maven 项目\r\n\r\n这里有几个重要的步骤：\r\n\r\n在 Eclipse 中，使用文件 - 新建 Maven 项目来创建一个新项目\r\n添加依赖项。\r\n添加 maven 插件。\r\n添加 Spring Boot 应用程序类。\r\n到这里，准备工作已经做好！\r\n\r\n九.为什么我们需要 spring-boot-maven-plugin?\r\nspring-boot-maven-plugin 提供了一些像 jar 一样打包或者运行应用程序的命令。\r\n\r\nspring-boot:run 运行你的 SpringBooty 应用程序。\r\nspring-boot：repackage 重新打包你的 jar 包或者是 war 包使其可执行\r\nspring-boot：start 和 spring-boot：stop 管理 Spring Boot 应用程序的生命周期（也可以说是为了集成测试）。\r\nspring-boot:build-info 生成执行器可以使用的构造信息。\r\n十.如何使用 SpringBoot 自动重装我的应用程序？\r\n使用 Spring Boot 开发工具。\r\n\r\n把 Spring Boot 开发工具添加进入你的项目是简单的。\r\n\r\n把下面的依赖项添加至你的 Spring Boot Project pom.xml 中\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><dependency>\r\n <groupId>org.springframework.boot</groupId>\r\n <artifactId>spring-boot-devtools</artifactId>\r\n <scope>runtime</scope>\r\n</dependency></pre>\r\n重启应用程序，然后就可以了。\r\n\r\n在我测试的时候，发现了 LiveReload 漏洞，如果你测试时也发现了，请一定要告诉我们。\r\n\r\n十一.什么是嵌入式服务器？我们为什么要使用嵌入式服务器呢?\r\n思考一下在你的虚拟机上部署应用程序需要些什么。\r\n\r\n第一步： 安装 Java\r\n\r\n第二部： 安装 Web 或者是应用程序的服务器（Tomat/Wbesphere/Weblogic 等等）\r\n\r\n第三部： 部署应用程序 war 包\r\n\r\n如果我们想简化这些步骤，应该如何做呢？\r\n\r\n让我们来思考如何使服务器成为应用程序的一部分？\r\n\r\n你只需要一个安装了 Java 的虚拟机，就可以直接在上面部署应用程序了，\r\n\r\n是不是很爽？\r\n\r\n这个想法是嵌入式服务器的起源。\r\n\r\n当我们创建一个可以部署的应用程序的时候，我们将会把服务器（例如，tomcat）嵌入到可部署的服务器中。\r\n\r\n例如，对于一个 Spring Boot 应用程序来说，你可以生成一个包含 Embedded Tomcat 的应用程序 jar。你就可以想运行正常 Java 应用程序一样来运行 web 应用程序了。\r\n\r\n嵌入式服务器就是我们的可执行单元包含服务器的二进制文件（例如，tomcat.jar）。\r\n\r\n十二.如何在 Spring Boot 中添加通用的 JS 代码？\r\n在源文件夹下，创建一个名为 static 的文件夹。然后，你可以把你的静态的内容放在这里面。\r\n\r\n例如，myapp.js 的路径是 resourcesstaticjsmyapp.js\r\n\r\n你可以参考它在 jsp 中的使用方法\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><csript src=\"/js/myapp.js\"></script></pre>\r\n错误：HAL browser gives me unauthorized error - Full authenticaition is required to access this resource.\r\n\r\n该如何来修复这个错误呢？\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">{\r\n \"timestamp\": 1488656019562,\r\n \"status\": 401,\r\n \"error\": \"Unauthorized\",\r\n \"message\": \"Full authentication is required to access this resource.\",\r\n \"path\": \"/beans\"\r\n}</pre>\r\n两种方法：\r\n\r\n方法 1：关闭安全验证\r\n\r\napplication.properties\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">management.security.enabled:FALSE</pre>\r\n方法二：在日志中搜索密码并传递至请求标头中\r\n\r\n十三.什么是 Spring Date？\r\nSpring Data 的使命是在保证底层数据存储特殊性的前提下，为数据访问提供一个熟悉的，一致性的，基于 Spring 的编程模型。这使得使用数据访问技术，关系数据库和非关系数据库，map-reduce 框架以及基于云的数据服务变得很容易。\r\n\r\n为了让它更简单一些，Spring Data 提供了不受底层数据源限制的 Abstractions 接口。\r\n\r\n下面来举一个例子\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">interface TodoRepository extends CrudRepository<Todo, Long> {</pre>\r\n你可以定义一简单的库，用来插入，更新，删除和检索代办事项，而不需要编写大量的代码。\r\n\r\n十四.什么是 Spring Data REST?\r\nSpring Data TEST 可以用来发布关于 Spring 数据库的 HATEOAS RESTful 资源。\r\n\r\n下面是一个使用 JPA 的例子\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">@RepositoryRestResource(collectionResourceRel = \"todos\", path = \"todos\")\r\npublic interface TodoRepository\r\n extends PagingAndSortingRepository<Todo, Long> {</pre>\r\n不需要写太多代码，我们可以发布关于 Spring 数据库的 RESTful API。\r\n\r\n下面展示的是一些关于 TEST 服务器的例子\r\n\r\nPOST\r\n\r\nURL:http：//localhost：8080/todos\r\nUse Header:Content-Type:Type:application/json\r\nRequest Content\r\n代码如下\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">{\r\n \"user\": \"Jill\",\r\n \"desc\": \"Learn Hibernate\",\r\n \"done\": false\r\n}</pre>\r\n响应内容\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">{\r\n \"user\": \"Jill\",\r\n \"desc\": \"Learn Hibernate\",\r\n \"done\": false,\r\n \"_links\": {\r\n\"self\": {\r\n \"href\": \"http://localhost:8080/todos/1\"\r\n},\r\n\"todo\": {\r\n \"href\": \"http://localhost:8080/todos/1\"\r\n}\r\n }\r\n}</pre>\r\n响应包含新创建资源的 href。\r\n\r\n十五.path=”users”, collectionResourceRel=”users” 如何与 Spring Data Rest 一起使用？\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\">@RepositoryRestResource(collectionResourceRel = \"users\", path = \"users\")\r\npublic interface UserRestRepository extends\r\nPagingAndSortingRepository<User, Long></pre>\r\npath- 这个资源要导出的路径段。\r\ncollectionResourceRel- 生成指向集合资源的链接时使用的 rel 值。在生成 HATEOAS 链接时使用。\r\n十六.当 Spring Boot 应用程序作为 Java 应用程序运行时，后台会发生什么？\r\n如果你使用 Eclipse IDE，Eclipse maven 插件确保依赖项或者类文件的改变一经添加，就会被编译并在目标文件中准备好！在这之后，就和其它的 Java 应用程序一样了。\r\n\r\n当你启动 java 应用程序的时候，spring boot 自动配置文件就会魔法般的启用了。\r\n\r\n当 Spring Boot 应用程序检测到你正在开发一个 web 应用程序的时候，它就会启动 tomcat。\r\n十七.我们能否在 spring-boot-starter-web 中用 jetty 代替 tomcat？\r\n在 spring-boot-starter-web 移除现有的依赖项，并把下面这些添加进去。\r\n\r\n<pre style=\"box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; word-break: initial; word-wrap: initial; white-space: pre; overflow: auto; margin: 16px 0px 14px; padding: 14px 15px 12px; border-radius: 3px; border: none; display: block; line-height: 1.6; background: rgb(246, 246, 246); color: rgb(61, 70, 77); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><dependency>\r\n <groupId>org.springframework.boot</groupId>\r\n <artifactId>spring-boot-starter-web</artifactId>\r\n <exclusions>\r\n <exclusion>\r\n <groupId>org.springframework.boot</groupId>\r\n <artifactId>spring-boot-starter-tomcat</artifactId>\r\n </exclusion>\r\n </exclusions>\r\n</dependency>\r\n<dependency>\r\n <groupId>org.springframework.boot</groupId>\r\n <artifactId>spring-boot-starter-jetty</artifactId>\r\n</dependency></pre>\r\n十八.如何使用 Spring Boot 部署到不同的服务器？\r\n你需要做下面两个步骤：\r\n\r\n在一个项目中生成一个 war 文件。\r\n将它部署到你最喜欢的服务器（websphere 或者 Weblogic 或者 Tomcat and so on）。\r\n第二步：取决于你的服务器。\r\n\r\n十九.RequestMapping 和 GetMapping 的不同之处在哪里？\r\nRequestMapping 具有类属性的，可以进行 GET,POST,PUT 或者其它的注释中具有的请求方法。\r\nGetMapping 是 GET 请求方法中的一个特例。它只是 ResquestMapping 的一个延伸，目的是为了提高清晰度。\r\n二十.为什么我们不建议在实际的应用程序中使用 Spring Data Rest?\r\n我们认为 Spring Data Rest 很适合快速原型制造！在大型应用程序中使用需要谨慎。\r\n\r\n通过 Spring Data REST 你可以把你的数据实体作为 RESTful 服务直接发布。\r\n\r\n当你设计 RESTful 服务器的时候，最佳实践表明，你的接口应该考虑到两件重要的事情：\r\n\r\n你的模型范围。\r\n你的客户。\r\n通过 With Spring Data REST，你不需要再考虑这两个方面，只需要作为 TEST 服务发布实体。\r\n\r\n这就是为什么我们建议使用 Spring Data Rest 在快速原型构造上面，或者作为项目的初始解决方法。对于完整演变项目来说，这并不是一个好的注意。\r\n\r\nSpring Boot扩展面试题\r\n二十一. 在 Spring Initializer 中，如何改变一个项目的包名字？\r\n\r\n二十二. JPA 和 Hibernate 有哪些区别？\r\n\r\n二十三. 业务边界应该从哪一层开始？\r\n\r\n二十四. 使用 Spring Boot 启动连接到内存数据库 H2 的 JPA 应用程序需要哪些依赖项？\r\n\r\n二十五.如何不通过任何配置来选择 Hibernate 作为 JPA 的默认实现？\r\n\r\n二十六.指定的数据库连接信息在哪里？它是如何知道自动连接至 H2 的？\r\n\r\n二十七.我们如何连接一个像 MSSQL 或者 orcale 一样的外部数据库？\r\n\r\n二十八.Spring Boot 配置的默认 H2 数据库的名字是上面？为什么默认的数据库名字是 testdb？\r\n\r\n二十九. 如果 H2 不在类路径里面，会出现上面情况？\r\n\r\n三十.你能否举一个以 ReadOnly 为事务管理的例子？\r\n\r\n三十一.发布 Spring Boot 用户应用程序自定义配置的最好方法是什么？\r\n\r\n三十二. 配置文件的需求是什么？\r\n\r\n三十三. 如何使用配置文件通过 Spring Boot 配置特定环境的配置？\r\n\r\n面试题整理\r\n','https://picsum.photos/id/1005/900/500','原创',3,'','','','','','2021-04-01 10:18:10','2021-04-03 16:21:52',3,1,'史上最全Spring Boot面试题（含答案）看完就是Spring Boot专家！');

/*Table structure for table `t_blog_tag` */

DROP TABLE IF EXISTS `t_blog_tag`;

CREATE TABLE `t_blog_tag` (
  `blog_id` bigint(20) NOT NULL COMMENT 'blogId',
  `tag_id` bigint(20) NOT NULL COMMENT 'tagId',
  PRIMARY KEY (`blog_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='blog和tag的中间表';

/*Data for the table `t_blog_tag` */

insert  into `t_blog_tag`(`blog_id`,`tag_id`) values (1,3),(1,15),(2,15),(2,16),(3,17),(3,18),(4,2),(4,3),(4,11),(5,19),(5,20),(6,17),(6,18),(7,1),(7,10),(7,21),(8,22),(8,23),(9,24),(9,25),(10,26),(10,27);

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `nick_name` varchar(100) DEFAULT NULL COMMENT '昵称',
  `email` varchar(100) DEFAULT NULL COMMENT '邮箱',
  `content` varchar(255) DEFAULT NULL COMMENT '评论内容',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `blog_id` bigint(20) DEFAULT NULL COMMENT '博客id',
  `parent_comment_id` bigint(20) DEFAULT NULL COMMENT '评论下的父评论',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4;

/*Data for the table `t_comment` */

insert  into `t_comment`(`id`,`nick_name`,`email`,`content`,`avatar`,`create_time`,`blog_id`,`parent_comment_id`) values (1,'小李','199378903@qq.com','1楼','/images/avatar.webp','2021-04-02 11:13:55',7,NULL),(2,'小张','199378903@qq.com','2楼','/images/avatar.webp','2021-04-02 11:20:11',7,NULL),(3,'小红','199378903@qq.com','3楼','/images/avatar.webp','2021-04-02 11:22:58',7,NULL),(4,'小张','199378903@qq.com','小红你好','/images/avatar.webp','2021-04-02 11:47:39',7,3),(5,'小红','199378903@qq.com','今天天气真不错啊','/images/avatar.webp','2021-04-02 12:45:57',7,3),(6,'小路','199378903@qq.com','我这天天下雨,难受啊!','/images/avatar.webp','2021-04-02 12:50:48',7,5),(7,'小路','199378903@qq.com','难受','/images/avatar.webp','2021-04-02 13:26:14',7,5),(8,'小路','199378903@qq.com','又是个梅雨天','/images/avatar.webp','2021-04-02 14:13:52',7,7),(9,'熊大','199378903@qq.com','我要盖楼啊啊啊啊 啊!!!!','/images/avatar.webp','2021-04-02 15:25:52',7,NULL),(10,'熊大','199378903@qq.com','我想盖个十楼的','/images/avatar.webp','2021-04-02 15:28:19',7,NULL),(11,'熊大','199378903@qq.com','继续在盖楼','/images/avatar.webp','2021-04-02 15:29:16',7,NULL),(12,'熊大','199378903@qq.com','我还在盖楼','/images/avatar.webp','2021-04-02 15:29:39',7,NULL),(13,'熊二','199378903@qq.com','盖你大爷,天天在这刷啊刷','/images/avatar.webp','2021-04-02 15:30:31',7,11),(14,'楼主','199378903@qq.com','欢迎评论','/images/avatar.webp','2021-04-03 14:03:55',8,NULL);

/*Table structure for table `t_tag` */

DROP TABLE IF EXISTS `t_tag`;

CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '标签id',
  `name` varchar(100) DEFAULT NULL COMMENT '标签名',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4;

/*Data for the table `t_tag` */

insert  into `t_tag`(`id`,`name`) values (1,'mysql'),(2,'css'),(3,'HTML'),(4,'Vue'),(5,'JavaScript'),(6,'Angular'),(7,'React'),(8,'Mysql笔记'),(9,'c++'),(10,'Mybatis'),(11,'jsp'),(15,'servlet'),(16,'邮件发送'),(17,'算法'),(18,'排序算法'),(19,'Linux'),(20,'Linux服务器命令'),(21,'Mybatis的使用'),(22,'青春励志'),(23,'生活'),(24,'经典'),(25,'经典散文'),(26,'spring'),(27,'spring面试题');

/*Table structure for table `t_type` */

DROP TABLE IF EXISTS `t_type`;

CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '分类id',
  `name` varchar(100) DEFAULT NULL COMMENT '类型名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;

/*Data for the table `t_type` */

insert  into `t_type`(`id`,`name`) values (1,'前端'),(2,'mysql'),(3,'SpringBoot'),(5,'Java'),(6,'生活'),(7,'励志'),(8,'项目'),(9,'后端');

/*Table structure for table `t_user` */

DROP TABLE IF EXISTS `t_user`;

CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `nick_name` varchar(100) DEFAULT NULL COMMENT '用户昵称',
  `email` varchar(100) DEFAULT NULL COMMENT '用户邮箱',
  `user_name` varchar(100) DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) DEFAULT NULL COMMENT '密码',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  `type` int(11) DEFAULT NULL COMMENT '类型',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;

/*Data for the table `t_user` */

insert  into `t_user`(`id`,`nick_name`,`email`,`user_name`,`password`,`avatar`,`type`,`create_time`,`update_time`) values (1,'狗子','gozi@qq.com','李二狗','202cb962ac59075b964b07152d234b70','https://picsum.photos/id/1025/100/100',1,'2021-03-28 14:18:04','2021-03-28 15:45:16');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
